#include "scaler.h"
#include "vdma.h"
#include "xil_printf.h"
#include "myColorRegister.h"
#include "sleep.h"
#include "instructions.h"
#include "api/ppu/ppu.h"

#define DEBUG

int main()
{
	configureScaler();
	configureVdma();

	//int colorA = 0;
	//int colorB = 0xFF;
	//MYCOLORREGISTER_mWriteReg(XPAR_MYCOLORREGISTER_0_S00_AXI_BASEADDR, 4, colorB);
		//MYCOLORREGISTER_mWriteReg(XPAR_MYCOLORREGISTER_0_S00_AXI_BASEADDR, 0, colorA );
		//MYCONTROLLERPPU_mWriteReg(XPAR_MYCONTROLLLERPPU_0_S00_AXI_BASEADDR, 0, instruction);
		//colorA = colorA + 1024;
		//sleep(1);

		//for(int i = 0; i < sizeof(tile_id_instructions)/sizeof(int); i++) {
			//MYCOLORREGISTER_mWriteReg(XPAR_MYCOLORREGISTER_0_S00_AXI_BASEADDR, 0,  tile_id_instructions[i]);
			//usleep(1);
		//}

		for(int i = 0; i < sizeof(tile_color_instructions)/sizeof(int); i++) {
			MYCOLORREGISTER_mWriteReg(XPAR_MYCOLORREGISTER_0_S00_AXI_BASEADDR, 0,  left_brick_color_instructions[i]);
			usleep(1);
		}
		for(int i = 0; i < sizeof(tile_color_instructions)/sizeof(int); i++) {
					MYCOLORREGISTER_mWriteReg(XPAR_MYCOLORREGISTER_0_S00_AXI_BASEADDR, 0,  right_brick_color_instructions[i]);
					usleep(1);
				}
		for(uint8_t i = 0; i < 64; i++) {
			for(uint8_t j = 0; j < 128; j++) {
				uint8_t tile_id = 0;
				if((j % 2 == 0 && i % 2 == 0) || (j % 2 != 0 && i % 2 != 0)) {
					tile_id = 1;
				}
				else{
					tile_id = 2;
				}
				PPU_SetBackgroundTileID(tile_id, j, i);
				usleep(1);
			}
		}
		PPU_SetBackgroundTileID(1, 0, 0);
		while(1) {
			for(int i = 0; i < 512; i++) {
				PPU_SetViewportOffset(i, i);
				usleep(50000);
			}
		}
	return 0;
}
